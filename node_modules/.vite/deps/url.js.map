{
  "version": 3,
  "sources": ["../../node-stdlib-browser/node_modules/url/url.js", "../../node-stdlib-browser/node_modules/rollup-plugin-node-builtins/src/es6/path.js", "../../node-stdlib-browser/proxy/url.js"],
  "sourcesContent": ["/*\n * Copyright Joyent, Inc. and other Node contributors.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to permit\n * persons to whom the Software is furnished to do so, subject to the\n * following conditions:\n *\n * The above copyright notice and this permission notice shall be included\n * in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n * NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n * DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n * OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n * USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\n'use strict';\n\nvar punycode = require('punycode/');\n\nfunction Url() {\n  this.protocol = null;\n  this.slashes = null;\n  this.auth = null;\n  this.host = null;\n  this.port = null;\n  this.hostname = null;\n  this.hash = null;\n  this.search = null;\n  this.query = null;\n  this.pathname = null;\n  this.path = null;\n  this.href = null;\n}\n\n// Reference: RFC 3986, RFC 1808, RFC 2396\n\n/*\n * define these here so at least they only have to be\n * compiled once on the first module load.\n */\nvar protocolPattern = /^([a-z0-9.+-]+:)/i,\n  portPattern = /:[0-9]*$/,\n\n  // Special case for a simple path URL\n  simplePathPattern = /^(\\/\\/?(?!\\/)[^?\\s]*)(\\?[^\\s]*)?$/,\n\n  /*\n   * RFC 2396: characters reserved for delimiting URLs.\n   * We actually just auto-escape these.\n   */\n  delims = [\n    '<', '>', '\"', '`', ' ', '\\r', '\\n', '\\t'\n  ],\n\n  // RFC 2396: characters not allowed for various reasons.\n  unwise = [\n    '{', '}', '|', '\\\\', '^', '`'\n  ].concat(delims),\n\n  // Allowed by RFCs, but cause of XSS attacks.  Always escape these.\n  autoEscape = ['\\''].concat(unwise),\n  /*\n   * Characters that are never ever allowed in a hostname.\n   * Note that any invalid chars are also handled, but these\n   * are the ones that are *expected* to be seen, so we fast-path\n   * them.\n   */\n  nonHostChars = [\n    '%', '/', '?', ';', '#'\n  ].concat(autoEscape),\n  hostEndingChars = [\n    '/', '?', '#'\n  ],\n  hostnameMaxLen = 255,\n  hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,\n  hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,\n  // protocols that can allow \"unsafe\" and \"unwise\" chars.\n  unsafeProtocol = {\n    javascript: true,\n    'javascript:': true\n  },\n  // protocols that never have a hostname.\n  hostlessProtocol = {\n    javascript: true,\n    'javascript:': true\n  },\n  // protocols that always contain a // bit.\n  slashedProtocol = {\n    http: true,\n    https: true,\n    ftp: true,\n    gopher: true,\n    file: true,\n    'http:': true,\n    'https:': true,\n    'ftp:': true,\n    'gopher:': true,\n    'file:': true\n  },\n  querystring = require('qs');\n\nfunction urlParse(url, parseQueryString, slashesDenoteHost) {\n  if (url && typeof url === 'object' && url instanceof Url) { return url; }\n\n  var u = new Url();\n  u.parse(url, parseQueryString, slashesDenoteHost);\n  return u;\n}\n\nUrl.prototype.parse = function (url, parseQueryString, slashesDenoteHost) {\n  if (typeof url !== 'string') {\n    throw new TypeError(\"Parameter 'url' must be a string, not \" + typeof url);\n  }\n\n  /*\n   * Copy chrome, IE, opera backslash-handling behavior.\n   * Back slashes before the query string get converted to forward slashes\n   * See: https://code.google.com/p/chromium/issues/detail?id=25916\n   */\n  var queryIndex = url.indexOf('?'),\n    splitter = queryIndex !== -1 && queryIndex < url.indexOf('#') ? '?' : '#',\n    uSplit = url.split(splitter),\n    slashRegex = /\\\\/g;\n  uSplit[0] = uSplit[0].replace(slashRegex, '/');\n  url = uSplit.join(splitter);\n\n  var rest = url;\n\n  /*\n   * trim before proceeding.\n   * This is to support parse stuff like \"  http://foo.com  \\n\"\n   */\n  rest = rest.trim();\n\n  if (!slashesDenoteHost && url.split('#').length === 1) {\n    // Try fast path regexp\n    var simplePath = simplePathPattern.exec(rest);\n    if (simplePath) {\n      this.path = rest;\n      this.href = rest;\n      this.pathname = simplePath[1];\n      if (simplePath[2]) {\n        this.search = simplePath[2];\n        if (parseQueryString) {\n          this.query = querystring.parse(this.search.substr(1));\n        } else {\n          this.query = this.search.substr(1);\n        }\n      } else if (parseQueryString) {\n        this.search = '';\n        this.query = {};\n      }\n      return this;\n    }\n  }\n\n  var proto = protocolPattern.exec(rest);\n  if (proto) {\n    proto = proto[0];\n    var lowerProto = proto.toLowerCase();\n    this.protocol = lowerProto;\n    rest = rest.substr(proto.length);\n  }\n\n  /*\n   * figure out if it's got a host\n   * user@server is *always* interpreted as a hostname, and url\n   * resolution will treat //foo/bar as host=foo,path=bar because that's\n   * how the browser resolves relative URLs.\n   */\n  if (slashesDenoteHost || proto || rest.match(/^\\/\\/[^@/]+@[^@/]+/)) {\n    var slashes = rest.substr(0, 2) === '//';\n    if (slashes && !(proto && hostlessProtocol[proto])) {\n      rest = rest.substr(2);\n      this.slashes = true;\n    }\n  }\n\n  if (!hostlessProtocol[proto] && (slashes || (proto && !slashedProtocol[proto]))) {\n\n    /*\n     * there's a hostname.\n     * the first instance of /, ?, ;, or # ends the host.\n     *\n     * If there is an @ in the hostname, then non-host chars *are* allowed\n     * to the left of the last @ sign, unless some host-ending character\n     * comes *before* the @-sign.\n     * URLs are obnoxious.\n     *\n     * ex:\n     * http://a@b@c/ => user:a@b host:c\n     * http://a@b?@c => user:a host:c path:/?@c\n     */\n\n    /*\n     * v0.12 TODO(isaacs): This is not quite how Chrome does things.\n     * Review our test case against browsers more comprehensively.\n     */\n\n    // find the first instance of any hostEndingChars\n    var hostEnd = -1;\n    for (var i = 0; i < hostEndingChars.length; i++) {\n      var hec = rest.indexOf(hostEndingChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) { hostEnd = hec; }\n    }\n\n    /*\n     * at this point, either we have an explicit point where the\n     * auth portion cannot go past, or the last @ char is the decider.\n     */\n    var auth, atSign;\n    if (hostEnd === -1) {\n      // atSign can be anywhere.\n      atSign = rest.lastIndexOf('@');\n    } else {\n      /*\n       * atSign must be in auth portion.\n       * http://a@b/c@d => host:b auth:a path:/c@d\n       */\n      atSign = rest.lastIndexOf('@', hostEnd);\n    }\n\n    /*\n     * Now we have a portion which is definitely the auth.\n     * Pull that off.\n     */\n    if (atSign !== -1) {\n      auth = rest.slice(0, atSign);\n      rest = rest.slice(atSign + 1);\n      this.auth = decodeURIComponent(auth);\n    }\n\n    // the host is the remaining to the left of the first non-host char\n    hostEnd = -1;\n    for (var i = 0; i < nonHostChars.length; i++) {\n      var hec = rest.indexOf(nonHostChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd)) { hostEnd = hec; }\n    }\n    // if we still have not hit it, then the entire thing is a host.\n    if (hostEnd === -1) { hostEnd = rest.length; }\n\n    this.host = rest.slice(0, hostEnd);\n    rest = rest.slice(hostEnd);\n\n    // pull out port.\n    this.parseHost();\n\n    /*\n     * we've indicated that there is a hostname,\n     * so even if it's empty, it has to be present.\n     */\n    this.hostname = this.hostname || '';\n\n    /*\n     * if hostname begins with [ and ends with ]\n     * assume that it's an IPv6 address.\n     */\n    var ipv6Hostname = this.hostname[0] === '[' && this.hostname[this.hostname.length - 1] === ']';\n\n    // validate a little.\n    if (!ipv6Hostname) {\n      var hostparts = this.hostname.split(/\\./);\n      for (var i = 0, l = hostparts.length; i < l; i++) {\n        var part = hostparts[i];\n        if (!part) { continue; }\n        if (!part.match(hostnamePartPattern)) {\n          var newpart = '';\n          for (var j = 0, k = part.length; j < k; j++) {\n            if (part.charCodeAt(j) > 127) {\n              /*\n               * we replace non-ASCII char with a temporary placeholder\n               * we need this to make sure size of hostname is not\n               * broken by replacing non-ASCII by nothing\n               */\n              newpart += 'x';\n            } else {\n              newpart += part[j];\n            }\n          }\n          // we test again with ASCII char only\n          if (!newpart.match(hostnamePartPattern)) {\n            var validParts = hostparts.slice(0, i);\n            var notHost = hostparts.slice(i + 1);\n            var bit = part.match(hostnamePartStart);\n            if (bit) {\n              validParts.push(bit[1]);\n              notHost.unshift(bit[2]);\n            }\n            if (notHost.length) {\n              rest = '/' + notHost.join('.') + rest;\n            }\n            this.hostname = validParts.join('.');\n            break;\n          }\n        }\n      }\n    }\n\n    if (this.hostname.length > hostnameMaxLen) {\n      this.hostname = '';\n    } else {\n      // hostnames are always lower case.\n      this.hostname = this.hostname.toLowerCase();\n    }\n\n    if (!ipv6Hostname) {\n      /*\n       * IDNA Support: Returns a punycoded representation of \"domain\".\n       * It only converts parts of the domain name that\n       * have non-ASCII characters, i.e. it doesn't matter if\n       * you call it with a domain that already is ASCII-only.\n       */\n      this.hostname = punycode.toASCII(this.hostname);\n    }\n\n    var p = this.port ? ':' + this.port : '';\n    var h = this.hostname || '';\n    this.host = h + p;\n    this.href += this.host;\n\n    /*\n     * strip [ and ] from the hostname\n     * the host field still retains them, though\n     */\n    if (ipv6Hostname) {\n      this.hostname = this.hostname.substr(1, this.hostname.length - 2);\n      if (rest[0] !== '/') {\n        rest = '/' + rest;\n      }\n    }\n  }\n\n  /*\n   * now rest is set to the post-host stuff.\n   * chop off any delim chars.\n   */\n  if (!unsafeProtocol[lowerProto]) {\n\n    /*\n     * First, make 100% sure that any \"autoEscape\" chars get\n     * escaped, even if encodeURIComponent doesn't think they\n     * need to be.\n     */\n    for (var i = 0, l = autoEscape.length; i < l; i++) {\n      var ae = autoEscape[i];\n      if (rest.indexOf(ae) === -1) { continue; }\n      var esc = encodeURIComponent(ae);\n      if (esc === ae) {\n        esc = escape(ae);\n      }\n      rest = rest.split(ae).join(esc);\n    }\n  }\n\n  // chop off from the tail first.\n  var hash = rest.indexOf('#');\n  if (hash !== -1) {\n    // got a fragment string.\n    this.hash = rest.substr(hash);\n    rest = rest.slice(0, hash);\n  }\n  var qm = rest.indexOf('?');\n  if (qm !== -1) {\n    this.search = rest.substr(qm);\n    this.query = rest.substr(qm + 1);\n    if (parseQueryString) {\n      this.query = querystring.parse(this.query);\n    }\n    rest = rest.slice(0, qm);\n  } else if (parseQueryString) {\n    // no query string, but parseQueryString still requested\n    this.search = '';\n    this.query = {};\n  }\n  if (rest) { this.pathname = rest; }\n  if (slashedProtocol[lowerProto] && this.hostname && !this.pathname) {\n    this.pathname = '/';\n  }\n\n  // to support http.request\n  if (this.pathname || this.search) {\n    var p = this.pathname || '';\n    var s = this.search || '';\n    this.path = p + s;\n  }\n\n  // finally, reconstruct the href based on what has been validated.\n  this.href = this.format();\n  return this;\n};\n\n// format a parsed object into a url string\nfunction urlFormat(obj) {\n  /*\n   * ensure it's an object, and not a string url.\n   * If it's an obj, this is a no-op.\n   * this way, you can call url_format() on strings\n   * to clean up potentially wonky urls.\n   */\n  if (typeof obj === 'string') { obj = urlParse(obj); }\n  if (!(obj instanceof Url)) { return Url.prototype.format.call(obj); }\n  return obj.format();\n}\n\nUrl.prototype.format = function () {\n  var auth = this.auth || '';\n  if (auth) {\n    auth = encodeURIComponent(auth);\n    auth = auth.replace(/%3A/i, ':');\n    auth += '@';\n  }\n\n  var protocol = this.protocol || '',\n    pathname = this.pathname || '',\n    hash = this.hash || '',\n    host = false,\n    query = '';\n\n  if (this.host) {\n    host = auth + this.host;\n  } else if (this.hostname) {\n    host = auth + (this.hostname.indexOf(':') === -1 ? this.hostname : '[' + this.hostname + ']');\n    if (this.port) {\n      host += ':' + this.port;\n    }\n  }\n\n  if (this.query && typeof this.query === 'object' && Object.keys(this.query).length) {\n    query = querystring.stringify(this.query, {\n      arrayFormat: 'repeat',\n      addQueryPrefix: false\n    });\n  }\n\n  var search = this.search || (query && ('?' + query)) || '';\n\n  if (protocol && protocol.substr(-1) !== ':') { protocol += ':'; }\n\n  /*\n   * only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.\n   * unless they had them to begin with.\n   */\n  if (this.slashes || (!protocol || slashedProtocol[protocol]) && host !== false) {\n    host = '//' + (host || '');\n    if (pathname && pathname.charAt(0) !== '/') { pathname = '/' + pathname; }\n  } else if (!host) {\n    host = '';\n  }\n\n  if (hash && hash.charAt(0) !== '#') { hash = '#' + hash; }\n  if (search && search.charAt(0) !== '?') { search = '?' + search; }\n\n  pathname = pathname.replace(/[?#]/g, function (match) {\n    return encodeURIComponent(match);\n  });\n  search = search.replace('#', '%23');\n\n  return protocol + host + pathname + search + hash;\n};\n\nfunction urlResolve(source, relative) {\n  return urlParse(source, false, true).resolve(relative);\n}\n\nUrl.prototype.resolve = function (relative) {\n  return this.resolveObject(urlParse(relative, false, true)).format();\n};\n\nfunction urlResolveObject(source, relative) {\n  if (!source) { return relative; }\n  return urlParse(source, false, true).resolveObject(relative);\n}\n\nUrl.prototype.resolveObject = function (relative) {\n  if (typeof relative === 'string') {\n    var rel = new Url();\n    rel.parse(relative, false, true);\n    relative = rel;\n  }\n\n  var result = new Url();\n  var tkeys = Object.keys(this);\n  for (var tk = 0; tk < tkeys.length; tk++) {\n    var tkey = tkeys[tk];\n    result[tkey] = this[tkey];\n  }\n\n  /*\n   * hash is always overridden, no matter what.\n   * even href=\"\" will remove it.\n   */\n  result.hash = relative.hash;\n\n  // if the relative url is empty, then there's nothing left to do here.\n  if (relative.href === '') {\n    result.href = result.format();\n    return result;\n  }\n\n  // hrefs like //foo/bar always cut to the protocol.\n  if (relative.slashes && !relative.protocol) {\n    // take everything except the protocol from relative\n    var rkeys = Object.keys(relative);\n    for (var rk = 0; rk < rkeys.length; rk++) {\n      var rkey = rkeys[rk];\n      if (rkey !== 'protocol') { result[rkey] = relative[rkey]; }\n    }\n\n    // urlParse appends trailing / to urls like http://www.example.com\n    if (slashedProtocol[result.protocol] && result.hostname && !result.pathname) {\n      result.pathname = '/';\n      result.path = result.pathname;\n    }\n\n    result.href = result.format();\n    return result;\n  }\n\n  if (relative.protocol && relative.protocol !== result.protocol) {\n    /*\n     * if it's a known url protocol, then changing\n     * the protocol does weird things\n     * first, if it's not file:, then we MUST have a host,\n     * and if there was a path\n     * to begin with, then we MUST have a path.\n     * if it is file:, then the host is dropped,\n     * because that's known to be hostless.\n     * anything else is assumed to be absolute.\n     */\n    if (!slashedProtocol[relative.protocol]) {\n      var keys = Object.keys(relative);\n      for (var v = 0; v < keys.length; v++) {\n        var k = keys[v];\n        result[k] = relative[k];\n      }\n      result.href = result.format();\n      return result;\n    }\n\n    result.protocol = relative.protocol;\n    if (!relative.host && !hostlessProtocol[relative.protocol]) {\n      var relPath = (relative.pathname || '').split('/');\n      while (relPath.length && !(relative.host = relPath.shift())) { }\n      if (!relative.host) { relative.host = ''; }\n      if (!relative.hostname) { relative.hostname = ''; }\n      if (relPath[0] !== '') { relPath.unshift(''); }\n      if (relPath.length < 2) { relPath.unshift(''); }\n      result.pathname = relPath.join('/');\n    } else {\n      result.pathname = relative.pathname;\n    }\n    result.search = relative.search;\n    result.query = relative.query;\n    result.host = relative.host || '';\n    result.auth = relative.auth;\n    result.hostname = relative.hostname || relative.host;\n    result.port = relative.port;\n    // to support http.request\n    if (result.pathname || result.search) {\n      var p = result.pathname || '';\n      var s = result.search || '';\n      result.path = p + s;\n    }\n    result.slashes = result.slashes || relative.slashes;\n    result.href = result.format();\n    return result;\n  }\n\n  var isSourceAbs = result.pathname && result.pathname.charAt(0) === '/',\n    isRelAbs = relative.host || relative.pathname && relative.pathname.charAt(0) === '/',\n    mustEndAbs = isRelAbs || isSourceAbs || (result.host && relative.pathname),\n    removeAllDots = mustEndAbs,\n    srcPath = result.pathname && result.pathname.split('/') || [],\n    relPath = relative.pathname && relative.pathname.split('/') || [],\n    psychotic = result.protocol && !slashedProtocol[result.protocol];\n\n  /*\n   * if the url is a non-slashed url, then relative\n   * links like ../.. should be able\n   * to crawl up to the hostname, as well.  This is strange.\n   * result.protocol has already been set by now.\n   * Later on, put the first path part into the host field.\n   */\n  if (psychotic) {\n    result.hostname = '';\n    result.port = null;\n    if (result.host) {\n      if (srcPath[0] === '') { srcPath[0] = result.host; } else { srcPath.unshift(result.host); }\n    }\n    result.host = '';\n    if (relative.protocol) {\n      relative.hostname = null;\n      relative.port = null;\n      if (relative.host) {\n        if (relPath[0] === '') { relPath[0] = relative.host; } else { relPath.unshift(relative.host); }\n      }\n      relative.host = null;\n    }\n    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');\n  }\n\n  if (isRelAbs) {\n    // it's absolute.\n    result.host = relative.host || relative.host === '' ? relative.host : result.host;\n    result.hostname = relative.hostname || relative.hostname === '' ? relative.hostname : result.hostname;\n    result.search = relative.search;\n    result.query = relative.query;\n    srcPath = relPath;\n    // fall through to the dot-handling below.\n  } else if (relPath.length) {\n    /*\n     * it's relative\n     * throw away the existing file, and take the new path instead.\n     */\n    if (!srcPath) { srcPath = []; }\n    srcPath.pop();\n    srcPath = srcPath.concat(relPath);\n    result.search = relative.search;\n    result.query = relative.query;\n  } else if (relative.search != null) {\n    /*\n     * just pull out the search.\n     * like href='?foo'.\n     * Put this after the other two cases because it simplifies the booleans\n     */\n    if (psychotic) {\n      result.host = srcPath.shift();\n      result.hostname = result.host;\n      /*\n       * occationaly the auth can get stuck only in host\n       * this especially happens in cases like\n       * url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n       */\n      var authInHost = result.host && result.host.indexOf('@') > 0 ? result.host.split('@') : false;\n      if (authInHost) {\n        result.auth = authInHost.shift();\n        result.hostname = authInHost.shift();\n        result.host = result.hostname;\n      }\n    }\n    result.search = relative.search;\n    result.query = relative.query;\n    // to support http.request\n    if (result.pathname !== null || result.search !== null) {\n      result.path = (result.pathname ? result.pathname : '') + (result.search ? result.search : '');\n    }\n    result.href = result.format();\n    return result;\n  }\n\n  if (!srcPath.length) {\n    /*\n     * no path at all.  easy.\n     * we've already handled the other stuff above.\n     */\n    result.pathname = null;\n    // to support http.request\n    if (result.search) {\n      result.path = '/' + result.search;\n    } else {\n      result.path = null;\n    }\n    result.href = result.format();\n    return result;\n  }\n\n  /*\n   * if a url ENDs in . or .., then it must get a trailing slash.\n   * however, if it ends in anything else non-slashy,\n   * then it must NOT get a trailing slash.\n   */\n  var last = srcPath.slice(-1)[0];\n  var hasTrailingSlash = (result.host || relative.host || srcPath.length > 1) && (last === '.' || last === '..') || last === '';\n\n  /*\n   * strip single dots, resolve double dots to parent dir\n   * if the path tries to go above the root, `up` ends up > 0\n   */\n  var up = 0;\n  for (var i = srcPath.length; i >= 0; i--) {\n    last = srcPath[i];\n    if (last === '.') {\n      srcPath.splice(i, 1);\n    } else if (last === '..') {\n      srcPath.splice(i, 1);\n      up++;\n    } else if (up) {\n      srcPath.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (!mustEndAbs && !removeAllDots) {\n    for (; up--; up) {\n      srcPath.unshift('..');\n    }\n  }\n\n  if (mustEndAbs && srcPath[0] !== '' && (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {\n    srcPath.unshift('');\n  }\n\n  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {\n    srcPath.push('');\n  }\n\n  var isAbsolute = srcPath[0] === '' || (srcPath[0] && srcPath[0].charAt(0) === '/');\n\n  // put the host back\n  if (psychotic) {\n    result.hostname = isAbsolute ? '' : srcPath.length ? srcPath.shift() : '';\n    result.host = result.hostname;\n    /*\n     * occationaly the auth can get stuck only in host\n     * this especially happens in cases like\n     * url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n     */\n    var authInHost = result.host && result.host.indexOf('@') > 0 ? result.host.split('@') : false;\n    if (authInHost) {\n      result.auth = authInHost.shift();\n      result.hostname = authInHost.shift();\n      result.host = result.hostname;\n    }\n  }\n\n  mustEndAbs = mustEndAbs || (result.host && srcPath.length);\n\n  if (mustEndAbs && !isAbsolute) {\n    srcPath.unshift('');\n  }\n\n  if (srcPath.length > 0) {\n    result.pathname = srcPath.join('/');\n  } else {\n    result.pathname = null;\n    result.path = null;\n  }\n\n  // to support request.http\n  if (result.pathname !== null || result.search !== null) {\n    result.path = (result.pathname ? result.pathname : '') + (result.search ? result.search : '');\n  }\n  result.auth = relative.auth || result.auth;\n  result.slashes = result.slashes || relative.slashes;\n  result.href = result.format();\n  return result;\n};\n\nUrl.prototype.parseHost = function () {\n  var host = this.host;\n  var port = portPattern.exec(host);\n  if (port) {\n    port = port[0];\n    if (port !== ':') {\n      this.port = port.substr(1);\n    }\n    host = host.substr(0, host.length - port.length);\n  }\n  if (host) { this.hostname = host; }\n};\n\nexports.parse = urlParse;\nexports.resolve = urlResolve;\nexports.resolveObject = urlResolveObject;\nexports.format = urlFormat;\n\nexports.Url = Url;\n", "// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// resolves . and .. elements in a path array with directory names there\n// must be no slashes, empty elements, or device names (c:\\) in the array\n// (so also no leading and trailing slashes - it does not distinguish\n// relative and absolute paths)\nfunction normalizeArray(parts, allowAboveRoot) {\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = parts.length - 1; i >= 0; i--) {\n    var last = parts[i];\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n}\n\n// Split a filename into [root, dir, basename, ext], unix version\n// 'root' is just a slash, or nothing.\nvar splitPathRe =\n    /^(\\/?|)([\\s\\S]*?)((?:\\.{1,2}|[^\\/]+?|)(\\.[^.\\/]*|))(?:[\\/]*)$/;\nvar splitPath = function(filename) {\n  return splitPathRe.exec(filename).slice(1);\n};\n\n// path.resolve([from ...], to)\n// posix version\nexport function resolve() {\n  var resolvedPath = '',\n      resolvedAbsolute = false;\n\n  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    var path = (i >= 0) ? arguments[i] : '/';\n\n    // Skip empty and invalid entries\n    if (typeof path !== 'string') {\n      throw new TypeError('Arguments to path.resolve must be strings');\n    } else if (!path) {\n      continue;\n    }\n\n    resolvedPath = path + '/' + resolvedPath;\n    resolvedAbsolute = path.charAt(0) === '/';\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {\n    return !!p;\n  }), !resolvedAbsolute).join('/');\n\n  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';\n};\n\n// path.normalize(path)\n// posix version\nexport function normalize(path) {\n  var isPathAbsolute = isAbsolute(path),\n      trailingSlash = substr(path, -1) === '/';\n\n  // Normalize the path\n  path = normalizeArray(filter(path.split('/'), function(p) {\n    return !!p;\n  }), !isPathAbsolute).join('/');\n\n  if (!path && !isPathAbsolute) {\n    path = '.';\n  }\n  if (path && trailingSlash) {\n    path += '/';\n  }\n\n  return (isPathAbsolute ? '/' : '') + path;\n};\n\n// posix version\nexport function isAbsolute(path) {\n  return path.charAt(0) === '/';\n}\n\n// posix version\nexport function join() {\n  var paths = Array.prototype.slice.call(arguments, 0);\n  return normalize(filter(paths, function(p, index) {\n    if (typeof p !== 'string') {\n      throw new TypeError('Arguments to path.join must be strings');\n    }\n    return p;\n  }).join('/'));\n}\n\n\n// path.relative(from, to)\n// posix version\nexport function relative(from, to) {\n  from = resolve(from).substr(1);\n  to = resolve(to).substr(1);\n\n  function trim(arr) {\n    var start = 0;\n    for (; start < arr.length; start++) {\n      if (arr[start] !== '') break;\n    }\n\n    var end = arr.length - 1;\n    for (; end >= 0; end--) {\n      if (arr[end] !== '') break;\n    }\n\n    if (start > end) return [];\n    return arr.slice(start, end - start + 1);\n  }\n\n  var fromParts = trim(from.split('/'));\n  var toParts = trim(to.split('/'));\n\n  var length = Math.min(fromParts.length, toParts.length);\n  var samePartsLength = length;\n  for (var i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n\n  var outputParts = [];\n  for (var i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n\n  return outputParts.join('/');\n}\n\nexport var sep = '/';\nexport var delimiter = ':';\n\nexport function dirname(path) {\n  var result = splitPath(path),\n      root = result[0],\n      dir = result[1];\n\n  if (!root && !dir) {\n    // No dirname whatsoever\n    return '.';\n  }\n\n  if (dir) {\n    // It has a dirname, strip trailing slash\n    dir = dir.substr(0, dir.length - 1);\n  }\n\n  return root + dir;\n}\n\nexport function basename(path, ext) {\n  var f = splitPath(path)[2];\n  // TODO: make this comparison case-insensitive on windows?\n  if (ext && f.substr(-1 * ext.length) === ext) {\n    f = f.substr(0, f.length - ext.length);\n  }\n  return f;\n}\n\n\nexport function extname(path) {\n  return splitPath(path)[3];\n}\nexport default {\n  extname: extname,\n  basename: basename,\n  dirname: dirname,\n  sep: sep,\n  delimiter: delimiter,\n  relative: relative,\n  join: join,\n  isAbsolute: isAbsolute,\n  normalize: normalize,\n  resolve: resolve\n};\nfunction filter (xs, f) {\n    if (xs.filter) return xs.filter(f);\n    var res = [];\n    for (var i = 0; i < xs.length; i++) {\n        if (f(xs[i], i, xs)) res.push(xs[i]);\n    }\n    return res;\n}\n\n// String.prototype.substr - negative index don't work in IE8\nvar substr = 'ab'.substr(-1) === 'b' ?\n    function (str, start, len) { return str.substr(start, len) } :\n    function (str, start, len) {\n        if (start < 0) start = str.length + start;\n        return str.substr(start, len);\n    }\n;\n", "/* globals unknown */\n\n/**\n * @typedef {import('url').URLFormatOptions} URLFormatOptions\n * @typedef {import('url').UrlObject} UrlObject\n * @typedef {import('url').format} formatImport\n * @typedef {import('url').parse} parseImport\n * @typedef {import('url').resolve} resolveImport\n * @typedef {import('url').Url} UrlImport\n * @typedef {import('url').fileURLToPath} fileURLToPath\n * @typedef {import('url').pathToFileURL} pathToFileURL\n * @typedef {import('url').domainToUnicode} domainToUnicode\n * @typedef {import('url').domainToASCII} domainToASCII\n */\n\n// @ts-ignore\nimport { format, parse, resolve, resolveObject, Url } from 'url';\nimport { resolve as pathResolve } from 'path';\n\nconst formatImport = /** @type {formatImport}*/ (format);\nconst parseImport = /** @type {parseImport}*/ (parse);\nconst resolveImport = /** @type {resolveImport}*/ (resolve);\n// @ts-ignore\nconst UrlImport = /** @type {UrlImport}*/ (Url);\n\nconst URL = globalThis.URL;\n/* eslint-disable-next-line unicorn/prevent-abbreviations */\nconst URLSearchParams = globalThis.URLSearchParams;\n\nconst percentRegEx = /%/g;\nconst backslashRegEx = /\\\\/g;\nconst newlineRegEx = /\\n/g;\nconst carriageReturnRegEx = /\\r/g;\nconst tabRegEx = /\\t/g;\nconst CHAR_FORWARD_SLASH = 47;\n\n/**\n * @param {unknown} instance\n */\nfunction isURLInstance(instance) {\n\tconst resolved = /** @type {URL|null} */ (instance ?? null);\n\treturn Boolean(resolved !== null && resolved?.href && resolved?.origin);\n}\n\n/**\n * @param {URL} url\n */\nfunction getPathFromURLPosix(url) {\n\tif (url.hostname !== '') {\n\t\tthrow new TypeError(\n\t\t\t`File URL host must be \"localhost\" or empty on browser`\n\t\t);\n\t}\n\tconst pathname = url.pathname;\n\tfor (let n = 0; n < pathname.length; n++) {\n\t\tif (pathname[n] === '%') {\n\t\t\t// @ts-ignore\n\t\t\tconst third = pathname.codePointAt(n + 2) | 0x20;\n\t\t\tif (pathname[n + 1] === '2' && third === 102) {\n\t\t\t\tthrow new TypeError(\n\t\t\t\t\t'File URL path must not include encoded / characters'\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\treturn decodeURIComponent(pathname);\n}\n\n/**\n * @param {string} filepath\n */\nfunction encodePathChars(filepath) {\n\tif (filepath.includes('%')) {\n\t\tfilepath = filepath.replace(percentRegEx, '%25');\n\t}\n\tif (filepath.includes('\\\\')) {\n\t\tfilepath = filepath.replace(backslashRegEx, '%5C');\n\t}\n\tif (filepath.includes('\\n')) {\n\t\tfilepath = filepath.replace(newlineRegEx, '%0A');\n\t}\n\tif (filepath.includes('\\r')) {\n\t\tfilepath = filepath.replace(carriageReturnRegEx, '%0D');\n\t}\n\tif (filepath.includes('\\t')) {\n\t\tfilepath = filepath.replace(tabRegEx, '%09');\n\t}\n\treturn filepath;\n}\n\nconst domainToASCII =\n\t/**\n\t * @type {domainToASCII}\n\t */\n\tfunction (domain) {\n\t\tif (typeof domain === 'undefined') {\n\t\t\tthrow new TypeError('The \"domain\" argument must be specified');\n\t\t}\n\t\treturn new URL(`http://${domain}`).hostname;\n\t};\n\nconst domainToUnicode =\n\t/**\n\t * @type {domainToUnicode}\n\t */\n\tfunction (domain) {\n\t\tif (typeof domain === 'undefined') {\n\t\t\tthrow new TypeError('The \"domain\" argument must be specified');\n\t\t}\n\t\treturn new URL(`http://${domain}`).hostname;\n\t};\n\nconst pathToFileURL =\n\t/**\n\t * @type {(url: string) => URL}\n\t */\n\tfunction (filepath) {\n\t\tconst outURL = new URL('file://');\n\t\tlet resolved = pathResolve(filepath);\n\t\tconst filePathLast = filepath.charCodeAt(filepath.length - 1);\n\t\tif (\n\t\t\tfilePathLast === CHAR_FORWARD_SLASH &&\n\t\t\tresolved[resolved.length - 1] !== '/'\n\t\t) {\n\t\t\tresolved += '/';\n\t\t}\n\t\toutURL.pathname = encodePathChars(resolved);\n\t\treturn outURL;\n\t};\n\nconst fileURLToPath =\n\t/**\n\t * @type {fileURLToPath & ((path: string | URL) => string)}\n\t */\n\tfunction (path) {\n\t\tif (!isURLInstance(path) && typeof path !== 'string') {\n\t\t\tthrow new TypeError(\n\t\t\t\t`The \"path\" argument must be of type string or an instance of URL. Received type ${typeof path} (${path})`\n\t\t\t);\n\t\t}\n\t\tconst resolved = new URL(path);\n\t\tif (resolved.protocol !== 'file:') {\n\t\t\tthrow new TypeError('The URL must be of scheme file');\n\t\t}\n\t\treturn getPathFromURLPosix(resolved);\n\t};\n\nconst formatImportWithOverloads =\n\t/**\n\t * @type {(\n\t *   ((urlObject: URL, options?: URLFormatOptions) => string) &\n\t *   ((urlObject: UrlObject | string, options?: never) => string)\n\t * )}\n\t */\n\tfunction (urlObject, options = {}) {\n\t\tif (!(urlObject instanceof URL)) {\n\t\t\treturn formatImport(urlObject);\n\t\t}\n\n\t\tif (typeof options !== 'object' || options === null) {\n\t\t\tthrow new TypeError(\n\t\t\t\t'The \"options\" argument must be of type object.'\n\t\t\t);\n\t\t}\n\n\t\tconst auth = options.auth ?? true;\n\t\tconst fragment = options.fragment ?? true;\n\t\tconst search = options.search ?? true;\n\t\tconst unicode = options.unicode ?? false;\n\n\t\tconst parsed = new URL(urlObject.toString());\n\n\t\tif (!auth) {\n\t\t\tparsed.username = '';\n\t\t\tparsed.password = '';\n\t\t}\n\n\t\tif (!fragment) {\n\t\t\tparsed.hash = '';\n\t\t}\n\n\t\tif (!search) {\n\t\t\tparsed.search = '';\n\t\t}\n\n\t\tif (unicode) {\n\t\t\t// Not implemented\n\t\t}\n\n\t\treturn parsed.toString();\n\t};\n\nconst api = {\n\tformat: formatImportWithOverloads,\n\tparse: parseImport,\n\tresolve: resolveImport,\n\tresolveObject,\n\tUrl: UrlImport,\n\tURL,\n\tURLSearchParams,\n\tdomainToASCII,\n\tdomainToUnicode,\n\tpathToFileURL,\n\tfileURLToPath\n};\n\nexport default api;\n\nexport {\n\tformatImportWithOverloads as format,\n\tparseImport as parse,\n\tresolveImport as resolve,\n\tresolveObject,\n\tUrlImport as Url,\n\tURL,\n\tURLSearchParams,\n\tdomainToASCII,\n\tdomainToUnicode,\n\tpathToFileURL,\n\tfileURLToPath\n};\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyBA,QAAI,WAAWA,oBAAAA,SAAAA;AAEf,aAAS,MAAM;AACb,WAAK,WAAW;AAChB,WAAK,UAAU;AACf,WAAK,OAAO;AACZ,WAAK,OAAO;AACZ,WAAK,OAAO;AACZ,WAAK,WAAW;AAChB,WAAK,OAAO;AACZ,WAAK,SAAS;AACd,WAAK,QAAQ;AACb,WAAK,WAAW;AAChB,WAAK,OAAO;AACZ,WAAK,OAAO;IACd;AAQA,QAAI,kBAAkB;AAAtB,QACE,cAAc;AADhB,QAIE,oBAAoB;AAJtB,QAUE,SAAS;MACP;MAAK;MAAK;MAAK;MAAK;MAAK;MAAM;MAAM;IACzC;AAZA,QAeE,SAAS;MACP;MAAK;MAAK;MAAK;MAAM;MAAK;IAC9B,EAAI,OAAO,MAAM;AAjBjB,QAoBE,aAAa,CAAC,GAAI,EAAE,OAAO,MAAM;AApBnC,QA2BE,eAAe;MACb;MAAK;MAAK;MAAK;MAAK;IACxB,EAAI,OAAO,UAAU;AA7BrB,QA8BE,kBAAkB;MAChB;MAAK;MAAK;IACd;AAhCA,QAiCE,iBAAiB;AAjCnB,QAkCE,sBAAsB;AAlCxB,QAmCE,oBAAoB;AAnCtB,QAqCE,iBAAiB;MACf,YAAY;MACZ,eAAe;IACnB;AAxCA,QA0CE,mBAAmB;MACjB,YAAY;MACZ,eAAe;IACnB;AA7CA,QA+CE,kBAAkB;MAChB,MAAM;MACN,OAAO;MACP,KAAK;MACL,QAAQ;MACR,MAAM;MACN,SAAS;MACT,UAAU;MACV,QAAQ;MACR,WAAW;MACX,SAAS;IACb;AA1DA,QA2DE,cAAcC,oBAAAA,SAAAA;AAEhB,aAAS,SAAS,KAAK,kBAAkB,mBAAmB;AAC1D,UAAI,OAAO,OAAO,QAAQ,YAAY,eAAe,KAAK;AAAE,eAAO;MAAI;AAEvE,UAAI,IAAI,IAAI,IAAG;AACf,QAAE,MAAM,KAAK,kBAAkB,iBAAiB;AAChD,aAAO;IACT;AAEA,QAAI,UAAU,QAAQ,SAAU,KAAK,kBAAkB,mBAAmB;AACxE,UAAI,OAAO,QAAQ,UAAU;AAC3B,cAAM,IAAI,UAAU,2CAA2C,OAAO,GAAG;MAC7E;AAOE,UAAI,aAAa,IAAI,QAAQ,GAAG,GAC9B,WAAW,eAAe,MAAM,aAAa,IAAI,QAAQ,GAAG,IAAI,MAAM,KACtE,SAAS,IAAI,MAAM,QAAQ,GAC3B,aAAa;AACf,aAAO,CAAC,IAAI,OAAO,CAAC,EAAE,QAAQ,YAAY,GAAG;AAC7C,YAAM,OAAO,KAAK,QAAQ;AAE1B,UAAI,OAAO;AAMX,aAAO,KAAK,KAAI;AAEhB,UAAI,CAAC,qBAAqB,IAAI,MAAM,GAAG,EAAE,WAAW,GAAG;AAErD,YAAI,aAAa,kBAAkB,KAAK,IAAI;AAC5C,YAAI,YAAY;AACd,eAAK,OAAO;AACZ,eAAK,OAAO;AACZ,eAAK,WAAW,WAAW,CAAC;AAC5B,cAAI,WAAW,CAAC,GAAG;AACjB,iBAAK,SAAS,WAAW,CAAC;AAC1B,gBAAI,kBAAkB;AACpB,mBAAK,QAAQ,YAAY,MAAM,KAAK,OAAO,OAAO,CAAC,CAAC;YAC9D,OAAe;AACL,mBAAK,QAAQ,KAAK,OAAO,OAAO,CAAC;YAC3C;UACA,WAAiB,kBAAkB;AAC3B,iBAAK,SAAS;AACd,iBAAK,QAAQ,CAAA;UACrB;AACM,iBAAO;QACb;MACA;AAEE,UAAI,QAAQ,gBAAgB,KAAK,IAAI;AACrC,UAAI,OAAO;AACT,gBAAQ,MAAM,CAAC;AACf,YAAI,aAAa,MAAM,YAAW;AAClC,aAAK,WAAW;AAChB,eAAO,KAAK,OAAO,MAAM,MAAM;MACnC;AAQE,UAAI,qBAAqB,SAAS,KAAK,MAAM,oBAAoB,GAAG;AAClE,YAAI,UAAU,KAAK,OAAO,GAAG,CAAC,MAAM;AACpC,YAAI,WAAW,EAAE,SAAS,iBAAiB,KAAK,IAAI;AAClD,iBAAO,KAAK,OAAO,CAAC;AACpB,eAAK,UAAU;QACrB;MACA;AAEE,UAAI,CAAC,iBAAiB,KAAK,MAAM,WAAY,SAAS,CAAC,gBAAgB,KAAK,IAAK;AAsB/E,YAAI,UAAU;AACd,iBAAS,IAAI,GAAG,IAAI,gBAAgB,QAAQ,KAAK;AAC/C,cAAI,MAAM,KAAK,QAAQ,gBAAgB,CAAC,CAAC;AACzC,cAAI,QAAQ,OAAO,YAAY,MAAM,MAAM,UAAU;AAAE,sBAAU;UAAI;QAC3E;AAMI,YAAI,MAAM;AACV,YAAI,YAAY,IAAI;AAElB,mBAAS,KAAK,YAAY,GAAG;QACnC,OAAW;AAKL,mBAAS,KAAK,YAAY,KAAK,OAAO;QAC5C;AAMI,YAAI,WAAW,IAAI;AACjB,iBAAO,KAAK,MAAM,GAAG,MAAM;AAC3B,iBAAO,KAAK,MAAM,SAAS,CAAC;AAC5B,eAAK,OAAO,mBAAmB,IAAI;QACzC;AAGI,kBAAU;AACV,iBAAS,IAAI,GAAG,IAAI,aAAa,QAAQ,KAAK;AAC5C,cAAI,MAAM,KAAK,QAAQ,aAAa,CAAC,CAAC;AACtC,cAAI,QAAQ,OAAO,YAAY,MAAM,MAAM,UAAU;AAAE,sBAAU;UAAI;QAC3E;AAEI,YAAI,YAAY,IAAI;AAAE,oBAAU,KAAK;QAAO;AAE5C,aAAK,OAAO,KAAK,MAAM,GAAG,OAAO;AACjC,eAAO,KAAK,MAAM,OAAO;AAGzB,aAAK,UAAS;AAMd,aAAK,WAAW,KAAK,YAAY;AAMjC,YAAI,eAAe,KAAK,SAAS,CAAC,MAAM,OAAO,KAAK,SAAS,KAAK,SAAS,SAAS,CAAC,MAAM;AAG3F,YAAI,CAAC,cAAc;AACjB,cAAI,YAAY,KAAK,SAAS,MAAM,IAAI;AACxC,mBAAS,IAAI,GAAG,IAAI,UAAU,QAAQ,IAAI,GAAG,KAAK;AAChD,gBAAI,OAAO,UAAU,CAAC;AACtB,gBAAI,CAAC,MAAM;AAAE;YAAS;AACtB,gBAAI,CAAC,KAAK,MAAM,mBAAmB,GAAG;AACpC,kBAAI,UAAU;AACd,uBAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,IAAI,GAAG,KAAK;AAC3C,oBAAI,KAAK,WAAW,CAAC,IAAI,KAAK;AAM5B,6BAAW;gBACzB,OAAmB;AACL,6BAAW,KAAK,CAAC;gBAC/B;cACA;AAEU,kBAAI,CAAC,QAAQ,MAAM,mBAAmB,GAAG;AACvC,oBAAI,aAAa,UAAU,MAAM,GAAG,CAAC;AACrC,oBAAI,UAAU,UAAU,MAAM,IAAI,CAAC;AACnC,oBAAI,MAAM,KAAK,MAAM,iBAAiB;AACtC,oBAAI,KAAK;AACP,6BAAW,KAAK,IAAI,CAAC,CAAC;AACtB,0BAAQ,QAAQ,IAAI,CAAC,CAAC;gBACpC;AACY,oBAAI,QAAQ,QAAQ;AAClB,yBAAO,MAAM,QAAQ,KAAK,GAAG,IAAI;gBAC/C;AACY,qBAAK,WAAW,WAAW,KAAK,GAAG;AACnC;cACZ;YACA;UACA;QACA;AAEI,YAAI,KAAK,SAAS,SAAS,gBAAgB;AACzC,eAAK,WAAW;QACtB,OAAW;AAEL,eAAK,WAAW,KAAK,SAAS,YAAW;QAC/C;AAEI,YAAI,CAAC,cAAc;AAOjB,eAAK,WAAW,SAAS,QAAQ,KAAK,QAAQ;QACpD;AAEI,YAAI,IAAI,KAAK,OAAO,MAAM,KAAK,OAAO;AACtC,YAAI,IAAI,KAAK,YAAY;AACzB,aAAK,OAAO,IAAI;AAChB,aAAK,QAAQ,KAAK;AAMlB,YAAI,cAAc;AAChB,eAAK,WAAW,KAAK,SAAS,OAAO,GAAG,KAAK,SAAS,SAAS,CAAC;AAChE,cAAI,KAAK,CAAC,MAAM,KAAK;AACnB,mBAAO,MAAM;UACrB;QACA;MACA;AAME,UAAI,CAAC,eAAe,UAAU,GAAG;AAO/B,iBAAS,IAAI,GAAG,IAAI,WAAW,QAAQ,IAAI,GAAG,KAAK;AACjD,cAAI,KAAK,WAAW,CAAC;AACrB,cAAI,KAAK,QAAQ,EAAE,MAAM,IAAI;AAAE;UAAS;AACxC,cAAI,MAAM,mBAAmB,EAAE;AAC/B,cAAI,QAAQ,IAAI;AACd,kBAAM,OAAO,EAAE;UACvB;AACM,iBAAO,KAAK,MAAM,EAAE,EAAE,KAAK,GAAG;QACpC;MACA;AAGE,UAAI,OAAO,KAAK,QAAQ,GAAG;AAC3B,UAAI,SAAS,IAAI;AAEf,aAAK,OAAO,KAAK,OAAO,IAAI;AAC5B,eAAO,KAAK,MAAM,GAAG,IAAI;MAC7B;AACE,UAAI,KAAK,KAAK,QAAQ,GAAG;AACzB,UAAI,OAAO,IAAI;AACb,aAAK,SAAS,KAAK,OAAO,EAAE;AAC5B,aAAK,QAAQ,KAAK,OAAO,KAAK,CAAC;AAC/B,YAAI,kBAAkB;AACpB,eAAK,QAAQ,YAAY,MAAM,KAAK,KAAK;QAC/C;AACI,eAAO,KAAK,MAAM,GAAG,EAAE;MAC3B,WAAa,kBAAkB;AAE3B,aAAK,SAAS;AACd,aAAK,QAAQ,CAAA;MACjB;AACE,UAAI,MAAM;AAAE,aAAK,WAAW;MAAK;AACjC,UAAI,gBAAgB,UAAU,KAAK,KAAK,YAAY,CAAC,KAAK,UAAU;AAClE,aAAK,WAAW;MACpB;AAGE,UAAI,KAAK,YAAY,KAAK,QAAQ;AAChC,YAAI,IAAI,KAAK,YAAY;AACzB,YAAI,IAAI,KAAK,UAAU;AACvB,aAAK,OAAO,IAAI;MACpB;AAGE,WAAK,OAAO,KAAK,OAAM;AACvB,aAAO;IACT;AAGA,aAAS,UAAU,KAAK;AAOtB,UAAI,OAAO,QAAQ,UAAU;AAAE,cAAM,SAAS,GAAG;MAAE;AACnD,UAAI,EAAE,eAAe,MAAM;AAAE,eAAO,IAAI,UAAU,OAAO,KAAK,GAAG;MAAE;AACnE,aAAO,IAAI,OAAM;IACnB;AAEA,QAAI,UAAU,SAAS,WAAY;AACjC,UAAI,OAAO,KAAK,QAAQ;AACxB,UAAI,MAAM;AACR,eAAO,mBAAmB,IAAI;AAC9B,eAAO,KAAK,QAAQ,QAAQ,GAAG;AAC/B,gBAAQ;MACZ;AAEE,UAAI,WAAW,KAAK,YAAY,IAC9B,WAAW,KAAK,YAAY,IAC5B,OAAO,KAAK,QAAQ,IACpB,OAAO,OACP,QAAQ;AAEV,UAAI,KAAK,MAAM;AACb,eAAO,OAAO,KAAK;MACvB,WAAa,KAAK,UAAU;AACxB,eAAO,QAAQ,KAAK,SAAS,QAAQ,GAAG,MAAM,KAAK,KAAK,WAAW,MAAM,KAAK,WAAW;AACzF,YAAI,KAAK,MAAM;AACb,kBAAQ,MAAM,KAAK;QACzB;MACA;AAEE,UAAI,KAAK,SAAS,OAAO,KAAK,UAAU,YAAY,OAAO,KAAK,KAAK,KAAK,EAAE,QAAQ;AAClF,gBAAQ,YAAY,UAAU,KAAK,OAAO;UACxC,aAAa;UACb,gBAAgB;QACtB,CAAK;MACL;AAEE,UAAI,SAAS,KAAK,UAAW,SAAU,MAAM,SAAW;AAExD,UAAI,YAAY,SAAS,OAAO,EAAE,MAAM,KAAK;AAAE,oBAAY;MAAI;AAM/D,UAAI,KAAK,YAAY,CAAC,YAAY,gBAAgB,QAAQ,MAAM,SAAS,OAAO;AAC9E,eAAO,QAAQ,QAAQ;AACvB,YAAI,YAAY,SAAS,OAAO,CAAC,MAAM,KAAK;AAAE,qBAAW,MAAM;QAAS;MAC5E,WAAa,CAAC,MAAM;AAChB,eAAO;MACX;AAEE,UAAI,QAAQ,KAAK,OAAO,CAAC,MAAM,KAAK;AAAE,eAAO,MAAM;MAAK;AACxD,UAAI,UAAU,OAAO,OAAO,CAAC,MAAM,KAAK;AAAE,iBAAS,MAAM;MAAO;AAEhE,iBAAW,SAAS,QAAQ,SAAS,SAAU,OAAO;AACpD,eAAO,mBAAmB,KAAK;MACnC,CAAG;AACD,eAAS,OAAO,QAAQ,KAAK,KAAK;AAElC,aAAO,WAAW,OAAO,WAAW,SAAS;IAC/C;AAEA,aAAS,WAAW,QAAQ,UAAU;AACpC,aAAO,SAAS,QAAQ,OAAO,IAAI,EAAE,QAAQ,QAAQ;IACvD;AAEA,QAAI,UAAU,UAAU,SAAU,UAAU;AAC1C,aAAO,KAAK,cAAc,SAAS,UAAU,OAAO,IAAI,CAAC,EAAE,OAAM;IACnE;AAEA,aAAS,iBAAiB,QAAQ,UAAU;AAC1C,UAAI,CAAC,QAAQ;AAAE,eAAO;MAAS;AAC/B,aAAO,SAAS,QAAQ,OAAO,IAAI,EAAE,cAAc,QAAQ;IAC7D;AAEA,QAAI,UAAU,gBAAgB,SAAU,UAAU;AAChD,UAAI,OAAO,aAAa,UAAU;AAChC,YAAI,MAAM,IAAI,IAAG;AACjB,YAAI,MAAM,UAAU,OAAO,IAAI;AAC/B,mBAAW;MACf;AAEE,UAAI,SAAS,IAAI,IAAG;AACpB,UAAI,QAAQ,OAAO,KAAK,IAAI;AAC5B,eAAS,KAAK,GAAG,KAAK,MAAM,QAAQ,MAAM;AACxC,YAAI,OAAO,MAAM,EAAE;AACnB,eAAO,IAAI,IAAI,KAAK,IAAI;MAC5B;AAME,aAAO,OAAO,SAAS;AAGvB,UAAI,SAAS,SAAS,IAAI;AACxB,eAAO,OAAO,OAAO,OAAM;AAC3B,eAAO;MACX;AAGE,UAAI,SAAS,WAAW,CAAC,SAAS,UAAU;AAE1C,YAAI,QAAQ,OAAO,KAAK,QAAQ;AAChC,iBAAS,KAAK,GAAG,KAAK,MAAM,QAAQ,MAAM;AACxC,cAAI,OAAO,MAAM,EAAE;AACnB,cAAI,SAAS,YAAY;AAAE,mBAAO,IAAI,IAAI,SAAS,IAAI;UAAE;QAC/D;AAGI,YAAI,gBAAgB,OAAO,QAAQ,KAAK,OAAO,YAAY,CAAC,OAAO,UAAU;AAC3E,iBAAO,WAAW;AAClB,iBAAO,OAAO,OAAO;QAC3B;AAEI,eAAO,OAAO,OAAO,OAAM;AAC3B,eAAO;MACX;AAEE,UAAI,SAAS,YAAY,SAAS,aAAa,OAAO,UAAU;AAW9D,YAAI,CAAC,gBAAgB,SAAS,QAAQ,GAAG;AACvC,cAAI,OAAO,OAAO,KAAK,QAAQ;AAC/B,mBAAS,IAAI,GAAG,IAAI,KAAK,QAAQ,KAAK;AACpC,gBAAI,IAAI,KAAK,CAAC;AACd,mBAAO,CAAC,IAAI,SAAS,CAAC;UAC9B;AACM,iBAAO,OAAO,OAAO,OAAM;AAC3B,iBAAO;QACb;AAEI,eAAO,WAAW,SAAS;AAC3B,YAAI,CAAC,SAAS,QAAQ,CAAC,iBAAiB,SAAS,QAAQ,GAAG;AAC1D,cAAI,WAAW,SAAS,YAAY,IAAI,MAAM,GAAG;AACjD,iBAAO,QAAQ,UAAU,EAAE,SAAS,OAAO,QAAQ,MAAK,IAAK;UAAA;AAC7D,cAAI,CAAC,SAAS,MAAM;AAAE,qBAAS,OAAO;UAAG;AACzC,cAAI,CAAC,SAAS,UAAU;AAAE,qBAAS,WAAW;UAAG;AACjD,cAAI,QAAQ,CAAC,MAAM,IAAI;AAAE,oBAAQ,QAAQ,EAAE;UAAE;AAC7C,cAAI,QAAQ,SAAS,GAAG;AAAE,oBAAQ,QAAQ,EAAE;UAAE;AAC9C,iBAAO,WAAW,QAAQ,KAAK,GAAG;QACxC,OAAW;AACL,iBAAO,WAAW,SAAS;QACjC;AACI,eAAO,SAAS,SAAS;AACzB,eAAO,QAAQ,SAAS;AACxB,eAAO,OAAO,SAAS,QAAQ;AAC/B,eAAO,OAAO,SAAS;AACvB,eAAO,WAAW,SAAS,YAAY,SAAS;AAChD,eAAO,OAAO,SAAS;AAEvB,YAAI,OAAO,YAAY,OAAO,QAAQ;AACpC,cAAI,IAAI,OAAO,YAAY;AAC3B,cAAI,IAAI,OAAO,UAAU;AACzB,iBAAO,OAAO,IAAI;QACxB;AACI,eAAO,UAAU,OAAO,WAAW,SAAS;AAC5C,eAAO,OAAO,OAAO,OAAM;AAC3B,eAAO;MACX;AAEE,UAAI,cAAc,OAAO,YAAY,OAAO,SAAS,OAAO,CAAC,MAAM,KACjE,WAAW,SAAS,QAAQ,SAAS,YAAY,SAAS,SAAS,OAAO,CAAC,MAAM,KACjF,aAAa,YAAY,eAAgB,OAAO,QAAQ,SAAS,UACjE,gBAAgB,YAChB,UAAU,OAAO,YAAY,OAAO,SAAS,MAAM,GAAG,KAAK,CAAA,GAC3D,UAAU,SAAS,YAAY,SAAS,SAAS,MAAM,GAAG,KAAK,CAAA,GAC/D,YAAY,OAAO,YAAY,CAAC,gBAAgB,OAAO,QAAQ;AASjE,UAAI,WAAW;AACb,eAAO,WAAW;AAClB,eAAO,OAAO;AACd,YAAI,OAAO,MAAM;AACf,cAAI,QAAQ,CAAC,MAAM,IAAI;AAAE,oBAAQ,CAAC,IAAI,OAAO;UAAK,OAAQ;AAAE,oBAAQ,QAAQ,OAAO,IAAI;UAAE;QAC/F;AACI,eAAO,OAAO;AACd,YAAI,SAAS,UAAU;AACrB,mBAAS,WAAW;AACpB,mBAAS,OAAO;AAChB,cAAI,SAAS,MAAM;AACjB,gBAAI,QAAQ,CAAC,MAAM,IAAI;AAAE,sBAAQ,CAAC,IAAI,SAAS;YAAK,OAAQ;AAAE,sBAAQ,QAAQ,SAAS,IAAI;YAAE;UACrG;AACM,mBAAS,OAAO;QACtB;AACI,qBAAa,eAAe,QAAQ,CAAC,MAAM,MAAM,QAAQ,CAAC,MAAM;MACpE;AAEE,UAAI,UAAU;AAEZ,eAAO,OAAO,SAAS,QAAQ,SAAS,SAAS,KAAK,SAAS,OAAO,OAAO;AAC7E,eAAO,WAAW,SAAS,YAAY,SAAS,aAAa,KAAK,SAAS,WAAW,OAAO;AAC7F,eAAO,SAAS,SAAS;AACzB,eAAO,QAAQ,SAAS;AACxB,kBAAU;MAEd,WAAa,QAAQ,QAAQ;AAKzB,YAAI,CAAC,SAAS;AAAE,oBAAU,CAAA;QAAG;AAC7B,gBAAQ,IAAG;AACX,kBAAU,QAAQ,OAAO,OAAO;AAChC,eAAO,SAAS,SAAS;AACzB,eAAO,QAAQ,SAAS;MAC5B,WAAa,SAAS,UAAU,MAAM;AAMlC,YAAI,WAAW;AACb,iBAAO,OAAO,QAAQ,MAAK;AAC3B,iBAAO,WAAW,OAAO;AAMzB,cAAI,aAAa,OAAO,QAAQ,OAAO,KAAK,QAAQ,GAAG,IAAI,IAAI,OAAO,KAAK,MAAM,GAAG,IAAI;AACxF,cAAI,YAAY;AACd,mBAAO,OAAO,WAAW,MAAK;AAC9B,mBAAO,WAAW,WAAW,MAAK;AAClC,mBAAO,OAAO,OAAO;UAC7B;QACA;AACI,eAAO,SAAS,SAAS;AACzB,eAAO,QAAQ,SAAS;AAExB,YAAI,OAAO,aAAa,QAAQ,OAAO,WAAW,MAAM;AACtD,iBAAO,QAAQ,OAAO,WAAW,OAAO,WAAW,OAAO,OAAO,SAAS,OAAO,SAAS;QAChG;AACI,eAAO,OAAO,OAAO,OAAM;AAC3B,eAAO;MACX;AAEE,UAAI,CAAC,QAAQ,QAAQ;AAKnB,eAAO,WAAW;AAElB,YAAI,OAAO,QAAQ;AACjB,iBAAO,OAAO,MAAM,OAAO;QACjC,OAAW;AACL,iBAAO,OAAO;QACpB;AACI,eAAO,OAAO,OAAO,OAAM;AAC3B,eAAO;MACX;AAOE,UAAI,OAAO,QAAQ,MAAM,EAAE,EAAE,CAAC;AAC9B,UAAI,oBAAoB,OAAO,QAAQ,SAAS,QAAQ,QAAQ,SAAS,OAAO,SAAS,OAAO,SAAS,SAAS,SAAS;AAM3H,UAAI,KAAK;AACT,eAAS,IAAI,QAAQ,QAAQ,KAAK,GAAG,KAAK;AACxC,eAAO,QAAQ,CAAC;AAChB,YAAI,SAAS,KAAK;AAChB,kBAAQ,OAAO,GAAG,CAAC;QACzB,WAAe,SAAS,MAAM;AACxB,kBAAQ,OAAO,GAAG,CAAC;AACnB;QACN,WAAe,IAAI;AACb,kBAAQ,OAAO,GAAG,CAAC;AACnB;QACN;MACA;AAGE,UAAI,CAAC,cAAc,CAAC,eAAe;AACjC,eAAO,MAAM,IAAI;AACf,kBAAQ,QAAQ,IAAI;QAC1B;MACA;AAEE,UAAI,cAAc,QAAQ,CAAC,MAAM,OAAO,CAAC,QAAQ,CAAC,KAAK,QAAQ,CAAC,EAAE,OAAO,CAAC,MAAM,MAAM;AACpF,gBAAQ,QAAQ,EAAE;MACtB;AAEE,UAAI,oBAAqB,QAAQ,KAAK,GAAG,EAAE,OAAO,EAAE,MAAM,KAAM;AAC9D,gBAAQ,KAAK,EAAE;MACnB;AAEE,UAAI,aAAa,QAAQ,CAAC,MAAM,MAAO,QAAQ,CAAC,KAAK,QAAQ,CAAC,EAAE,OAAO,CAAC,MAAM;AAG9E,UAAI,WAAW;AACb,eAAO,WAAW,aAAa,KAAK,QAAQ,SAAS,QAAQ,MAAK,IAAK;AACvE,eAAO,OAAO,OAAO;AAMrB,YAAI,aAAa,OAAO,QAAQ,OAAO,KAAK,QAAQ,GAAG,IAAI,IAAI,OAAO,KAAK,MAAM,GAAG,IAAI;AACxF,YAAI,YAAY;AACd,iBAAO,OAAO,WAAW,MAAK;AAC9B,iBAAO,WAAW,WAAW,MAAK;AAClC,iBAAO,OAAO,OAAO;QAC3B;MACA;AAEE,mBAAa,cAAe,OAAO,QAAQ,QAAQ;AAEnD,UAAI,cAAc,CAAC,YAAY;AAC7B,gBAAQ,QAAQ,EAAE;MACtB;AAEE,UAAI,QAAQ,SAAS,GAAG;AACtB,eAAO,WAAW,QAAQ,KAAK,GAAG;MACtC,OAAS;AACL,eAAO,WAAW;AAClB,eAAO,OAAO;MAClB;AAGE,UAAI,OAAO,aAAa,QAAQ,OAAO,WAAW,MAAM;AACtD,eAAO,QAAQ,OAAO,WAAW,OAAO,WAAW,OAAO,OAAO,SAAS,OAAO,SAAS;MAC9F;AACE,aAAO,OAAO,SAAS,QAAQ,OAAO;AACtC,aAAO,UAAU,OAAO,WAAW,SAAS;AAC5C,aAAO,OAAO,OAAO,OAAM;AAC3B,aAAO;IACT;AAEA,QAAI,UAAU,YAAY,WAAY;AACpC,UAAI,OAAO,KAAK;AAChB,UAAI,OAAO,YAAY,KAAK,IAAI;AAChC,UAAI,MAAM;AACR,eAAO,KAAK,CAAC;AACb,YAAI,SAAS,KAAK;AAChB,eAAK,OAAO,KAAK,OAAO,CAAC;QAC/B;AACI,eAAO,KAAK,OAAO,GAAG,KAAK,SAAS,KAAK,MAAM;MACnD;AACE,UAAI,MAAM;AAAE,aAAK,WAAW;MAAK;IACnC;AAEA,QAAa,QAAG;AAChB,QAAeC,YAAG;AACG,QAAA,gBAAG;AACxB,QAAc,SAAG;AAEjB,QAAA,QAAc;AC9uBd,aAAS,eAAe,OAAO,gBAAgB;AAE7C,UAAI,KAAK;AACT,eAAS,IAAI,MAAM,SAAS,GAAG,KAAK,GAAG,KAAK;AAC1C,YAAI,OAAO,MAAM,CAAC;AAClB,YAAI,SAAS,KAAK;AAChB,gBAAM,OAAO,GAAG,CAAC;QACvB,WAAe,SAAS,MAAM;AACxB,gBAAM,OAAO,GAAG,CAAC;AACjB;QACN,WAAe,IAAI;AACb,gBAAM,OAAO,GAAG,CAAC;AACjB;QACN;MACA;AAGE,UAAI,gBAAgB;AAClB,eAAO,MAAM,IAAI;AACf,gBAAM,QAAQ,IAAI;QACxB;MACA;AAEE,aAAO;IACT;AAYO,aAAS,UAAU;AACxB,UAAI,eAAe,IACf,mBAAmB;AAEvB,eAAS,IAAI,UAAU,SAAS,GAAG,KAAK,MAAM,CAAC,kBAAkB,KAAK;AACpE,YAAI,OAAQ,KAAK,IAAK,UAAU,CAAC,IAAI;AAGrC,YAAI,OAAO,SAAS,UAAU;AAC5B,gBAAM,IAAI,UAAU,2CAA2C;QACrE,WAAe,CAAC,MAAM;AAChB;QACN;AAEI,uBAAe,OAAO,MAAM;AAC5B,2BAAmB,KAAK,OAAO,CAAC,MAAM;MAC1C;AAME,qBAAe,eAAe,OAAO,aAAa,MAAM,GAAG,GAAG,SAAS,GAAG;AACxE,eAAO,CAAC,CAAC;MACb,CAAG,GAAG,CAAC,gBAAgB,EAAE,KAAK,GAAG;AAE/B,cAAS,mBAAmB,MAAM,MAAM,gBAAiB;IAC3D;AAiIA,aAAS,OAAQ,IAAI,GAAG;AACpB,UAAI,GAAG;AAAQ,eAAO,GAAG,OAAO,CAAC;AACjC,UAAI,MAAM,CAAA;AACV,eAAS,IAAI,GAAG,IAAI,GAAG,QAAQ,KAAK;AAChC,YAAI,EAAE,GAAG,CAAC,GAAG,GAAG,EAAE;AAAG,cAAI,KAAK,GAAG,CAAC,CAAC;MAC3C;AACI,aAAO;IACX;;;;;;;;;;;;;;;;;;;;;AC7MA,QAAMC;;MAA2CC;;AAC3CC,QAAAA;;MAAyCC;;AACzCC,QAAAA;;MAA6CL;;AAE7CM,QAAAA;;MAAqCC;;AAE3C,QAAMC,MAAMC,YAAWD;AAEvB,QAAME,kBAAkBD,YAAWC;AAEnC,QAAMC,eAAe;AACrB,QAAMC,iBAAiB;AACvB,QAAMC,eAAe;AACrB,QAAMC,sBAAsB;AAC5B,QAAMC,WAAW;AACjB,QAAMC,qBAAqB;AAK3B,aAASC,cAAcC,UAAU;AAChC,UAAMC;;QAAoCD,YAAAA,OAAAA,WAAY;;AACtD,aAAOE,QAAQD,aAAa,SAAQA,YAAQ,OAAA,SAARA,SAAUE,UAAQF,YAAQ,OAAA,SAARA,SAAUG,OAAO;IACxE;AAKA,aAASC,oBAAoBC,KAAK;AACjC,UAAIA,IAAIC,aAAa,IAAI;AACxB,cAAM,IAAIC,UAAS,uDAEnB;MACD;AACA,UAAMC,WAAWH,IAAIG;AACrB,eAASC,IAAI,GAAGA,IAAID,SAASE,QAAQD,KAAK;AACzC,YAAID,SAASC,CAAC,MAAM,KAAK;AAExB,cAAME,QAAQH,SAASI,YAAYH,IAAI,CAAC,IAAI;AAC5C,cAAID,SAASC,IAAI,CAAC,MAAM,OAAOE,UAAU,KAAK;AAC7C,kBAAM,IAAIJ,UACT,qDACD;UACD;QACD;MACD;AACA,aAAOM,mBAAmBL,QAAQ;IACnC;AAKA,aAASM,gBAAgBC,UAAU;AAClC,UAAIA,SAASC,SAAS,GAAG,GAAG;AAC3BD,mBAAWA,SAASE,QAAQzB,cAAc,KAAK;MAChD;AACA,UAAIuB,SAASC,SAAS,IAAI,GAAG;AAC5BD,mBAAWA,SAASE,QAAQxB,gBAAgB,KAAK;MAClD;AACA,UAAIsB,SAASC,SAAS,IAAI,GAAG;AAC5BD,mBAAWA,SAASE,QAAQvB,cAAc,KAAK;MAChD;AACA,UAAIqB,SAASC,SAAS,IAAI,GAAG;AAC5BD,mBAAWA,SAASE,QAAQtB,qBAAqB,KAAK;MACvD;AACA,UAAIoB,SAASC,SAAS,GAAI,GAAG;AAC5BD,mBAAWA,SAASE,QAAQrB,UAAU,KAAK;MAC5C;AACA,aAAOmB;IACR;AAEA,QAAMG;;;;MAIL,SAJKA,eAIKC,QAAQ;AACjB,YAAI,OAAOA,WAAW,aAAa;AAClC,gBAAM,IAAIZ,UAAU,yCAAyC;QAC9D;AACA,eAAO,IAAIlB,IAAG,YAAW8B,MAAQ,EAAEb;MACpC;;AAED,QAAMc;;;;MAIL,SAJKA,iBAIKD,QAAQ;AACjB,YAAI,OAAOA,WAAW,aAAa;AAClC,gBAAM,IAAIZ,UAAU,yCAAyC;QAC9D;AACA,eAAO,IAAIlB,IAAG,YAAW8B,MAAQ,EAAEb;MACpC;;AAED,QAAMe;;;;MAIL,SAJKA,eAIKN,UAAU;AACnB,YAAMO,SAAS,IAAIjC,IAAI,SAAS;AAChC,YAAIW,WAAWuB,QAAYR,QAAQ;AACnC,YAAMS,eAAeT,SAASU,WAAWV,SAASL,SAAS,CAAC;AAC5D,YACCc,iBAAiB3B,sBACjBG,SAASA,SAASU,SAAS,CAAC,MAAM,KACjC;AACDV,sBAAY;QACb;AACAsB,eAAOd,WAAWM,gBAAgBd,QAAQ;AAC1C,eAAOsB;MACR;;AAED,QAAMI;;;;MAIL,SAJKA,eAIKC,MAAM;AACf,YAAI,CAAC7B,cAAc6B,IAAI,KAAK,OAAOA,SAAS,UAAU;AACrD,gBAAM,IAAIpB,UAC0E,qFAAA,OAAOoB,OAASA,OAAAA,OAAI,GACxG;QACD;AACA,YAAM3B,WAAW,IAAIX,IAAIsC,IAAI;AAC7B,YAAI3B,SAAS4B,aAAa,SAAS;AAClC,gBAAM,IAAIrB,UAAU,gCAAgC;QACrD;AACA,eAAOH,oBAAoBJ,QAAQ;MACpC;;AAED,QAAM6B;;;;;;;MAOL,SAPKA,2BAOKC,WAAWC,SAAc;AAAA,YAAAC,eAAAC,mBAAAC,iBAAAC;AAAA,YAAdJ,YAAO,QAAA;AAAPA,oBAAU,CAAA;QAAE;AAChC,YAAI,EAAED,qBAAqBzC,MAAM;AAChC,iBAAOP,aAAagD,SAAS;QAC9B;AAEA,YAAI,OAAOC,YAAY,YAAYA,YAAY,MAAM;AACpD,gBAAM,IAAIxB,UACT,gDACD;QACD;AAEA,YAAM6B,QAAIJ,gBAAGD,QAAQK,SAAI,OAAAJ,gBAAI;AAC7B,YAAMK,YAAQJ,oBAAGF,QAAQM,aAAQ,OAAAJ,oBAAI;AACrC,YAAMK,UAAMJ,kBAAGH,QAAQO,WAAM,OAAAJ,kBAAI;AACpBC,SAAAA,mBAAGJ,QAAQQ,YAAO,OAAAJ,mBAAI;AAEnC,YAAMK,SAAS,IAAInD,IAAIyC,UAAUW,SAAQ,CAAE;AAE3C,YAAI,CAACL,MAAM;AACVI,iBAAOE,WAAW;AAClBF,iBAAOG,WAAW;QACnB;AAEA,YAAI,CAACN,UAAU;AACdG,iBAAOI,OAAO;QACf;AAEA,YAAI,CAACN,QAAQ;AACZE,iBAAOF,SAAS;QACjB;AAMA,eAAOE,OAAOC,SAAQ;MACvB;;AAED,QAAMI,MAAM;MACX9D,QAAQ8C;MACR5C,OAAOD;MACPH,SAASK;MACT4D;MACA1D,KAAKD;MACLE;MACAE;MACA2B;MACAE;MACAC;MACAK;IACD;;;;;;;;;;;;;;;;",
  "names": ["require$$0", "require$$1", "resolve", "formatImport", "format", "parseImport", "parse", "resolveImport", "UrlImport", "Url", "URL", "_globalThis", "URLSearchParams", "percentRegEx", "backslashRegEx", "newlineRegEx", "carriageReturnRegEx", "tabRegEx", "CHAR_FORWARD_SLASH", "isURLInstance", "instance", "resolved", "Boolean", "href", "origin", "getPathFromURLPosix", "url", "hostname", "TypeError", "pathname", "n", "length", "third", "codePointAt", "decodeURIComponent", "encodePathChars", "filepath", "includes", "replace", "domainToASCII", "domain", "domainToUnicode", "pathToFileURL", "outURL", "pathResolve", "filePathLast", "charCodeAt", "fileURLToPath", "path", "protocol", "formatImportWithOverloads", "urlObject", "options", "_options$auth", "_options$fragment", "_options$search", "_options$unicode", "auth", "fragment", "search", "unicode", "parsed", "toString", "username", "password", "hash", "api", "resolveObject"]
}
